name: Java CI/CD Pipeline for allclimb/allclimb-black

on:
  push:
    branches:
      - dev
      - release
  workflow_dispatch:

env:
  SERVICE_NAME: "allclimb-black"
  PROJECT_NAME: "allclimb"
  BUILD_NUMBER: ${{ github.run_number }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: '8.7'

      # Gradle 빌드
      - name: Build with Gradle Wrapper
        run: ./gradlew :user-api:build -x test

      # 빌드된 JAR 파일을 최상위 디렉토리로 이동
      - name: Copy JAR to root
        run: cp user-api/build/libs/user-api-0.0.1-SNAPSHOT.jar app.jar

      # Docker 이미지 빌드 및 푸시
      - name: Build and Push Docker Image to GHCR
        run: |
          IMAGE_TAG=${{ env.BUILD_NUMBER }}
          docker build -t ghcr.io/${{ github.repository_owner }}/${{ env.PROJECT_NAME }}/${{ env.SERVICE_NAME }}:$IMAGE_TAG -f user-api/Dockerfile .
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker push ghcr.io/${{ github.repository_owner }}/${{ env.PROJECT_NAME }}/${{ env.SERVICE_NAME }}:$IMAGE_TAG

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Set Deployment Environment
        run: |
          if [ "${{ github.ref }}" == "refs/heads/dev" ]; then echo "ENV=dev" >> $GITHUB_ENV; else echo "ENV=prod" >> $GITHUB_ENV; fi

      - name: SSH and Deploy allclimb-black
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            IMAGE_TAG=${{ env.BUILD_NUMBER }}
            ENV=${{ env.ENV }}

            # .env 파일 생성하여 Docker Compose가 읽도록 설정
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > /home/allclimb/allclimb-black/.env
            echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> /home/allclimb/allclimb-black/.env
            echo "DATABASE_PW=${{ secrets.DATABASE_PW }}" >> /home/allclimb/allclimb-black/.env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> /home/allclimb/allclimb-black/.env
            echo "OAUTH_GOOGLE_CLIENT_ID=${{ secrets.OAUTH_GOOGLE_CLIENT_ID }}" >> /home/allclimb/allclimb-black/.env
            echo "OAUTH_GOOGLE_CLIENT_SECRET=${{ secrets.OAUTH_GOOGLE_CLIENT_SECRET }}" >> /home/allclimb/allclimb-black/.env
            echo "ACCESS_TOKEN_EXPIRATION_TIME=${{ vars.ACCESS_TOKEN_EXPIRATION_TIME }}" >> /home/allclimb/allclimb-black/.env
            echo "REFRESH_TOKEN_EXPIRATION_TIME=${{ vars.REFRESH_TOKEN_EXPIRATION_TIME }}" >> /home/allclimb/allclimb-black/.env

            # Docker Compose 실행
            docker login ghcr.io -u ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }}
            cd /home/allclimb/allclimb-black
            docker compose up -d --env-file .env

      # Slack 알림 전송 단계 추가
      - name: Notify Slack
        if: always()  # 성공 여부와 관계없이 알림 전송
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "Deployment completed for *${{ env.SERVICE_NAME }}* in *${{ env.ENV }}* environment.\nBuild Number: *${{ env.BUILD_NUMBER }}*\nStatus: Success"
          }' $SLACK_WEBHOOK_URL
