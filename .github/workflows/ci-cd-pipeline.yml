name: Java CI/CD Pipeline for allclimb/allclimb-black

on:
  push:
    branches:
      - dev
      - release
  workflow_dispatch:

env:
  SERVICE_NAME: "allclimb-black"
  PROJECT_NAME: "allclimb"
  BUILD_NUMBER: ${{ github.run_number }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    environment: ${{ github.ref == 'refs/heads/dev' && 'dev' || 'prod' }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
        with:
          gradle-version: '8.7'

      - name: Build with Gradle Wrapper
        run: ./gradlew :user-api:build -x test

      - name: Copy JAR to root
        run: cp user-api/build/libs/user-api-0.0.1-SNAPSHOT.jar app.jar

      - name: Build and Push Docker Image to GHCR
        run: |
          IMAGE_TAG=${{ env.BUILD_NUMBER }}
          docker build -t ghcr.io/${{ github.repository_owner }}/${{ env.PROJECT_NAME }}/${{ env.SERVICE_NAME }}:$IMAGE_TAG -f user-api/Dockerfile .
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker push ghcr.io/${{ github.repository_owner }}/${{ env.PROJECT_NAME }}/${{ env.SERVICE_NAME }}:$IMAGE_TAG

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/dev' && 'dev' || 'prod' }}

    steps:
      - name: Set Deployment Environment
        run: |
          if [ "${{ github.ref }}" == "refs/heads/dev" ]; then echo "ENV=dev" >> $GITHUB_ENV; else echo "ENV=prod" >> $GITHUB_ENV; fi

      - name: SSH and Deploy allclimb-black
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          debug: true
          script: |
            IMAGE_TAG=${{ env.BUILD_NUMBER }}
            ENV=${{ env.ENVIRONMENT }}

            # .env 파일 생성하여 Docker Compose가 읽도록 설정
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > /home/allclimb/allclimb-black/.env
            echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> /home/allclimb/allclimb-black/.env
            echo "DATABASE_PW=${{ secrets.DATABASE_PW }}" >> /home/allclimb/allclimb-black/.env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> /home/allclimb/allclimb-black/.env
            echo "OAUTH_GOOGLE_CLIENT_ID=${{ secrets.OAUTH_GOOGLE_CLIENT_ID }}" >> /home/allclimb/allclimb-black/.env
            echo "OAUTH_GOOGLE_CLIENT_SECRET=${{ secrets.OAUTH_GOOGLE_CLIENT_SECRET }}" >> /home/allclimb/allclimb-black/.env
            echo "ACCESS_TOKEN_EXPIRATION_TIME=${{ vars.ACCESS_TOKEN_EXPIRATION_TIME }}" >> /home/allclimb/allclimb-black/.env
            echo "REFRESH_TOKEN_EXPIRATION_TIME=${{ vars.REFRESH_TOKEN_EXPIRATION_TIME }}" >> /home/allclimb/allclimb-black/.env
            echo "TAG=$IMAGE_TAG" >> /home/allclimb/allclimb-black/.env
            echo "ENV=$ENV" >> /home/allclimb/allclimb-black/.env

            # Docker Compose 실행
            docker login ghcr.io -u ${{ github.actor }} --password-stdin <<< "${{ secrets.GITHUB_TOKEN }}"
            cd /home/allclimb/allclimb-black
            docker compose up -d



  # 실패해도 항상 실행되는 Slack 알림 단계
  notify-slack:
    needs: [build-and-push, deploy]
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/dev' && 'dev' || 'prod' }}
    if: always()
    steps:
      - name: Send Slack Notification
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_REF: ${{ github.ref }}
          BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
          ENVIRONMENT: ${{ github.ref == 'refs/heads/dev' && 'dev' || 'prod' }}
        run: |
          STATUS="Success"
          if [ "${{ job.status }}" != "success" ]; then STATUS="Failed"; fi

          START_TIME=$(date -d "${{ github.event.workflow_run.created_at }}" +%s)
          END_TIME=$(date +%s)
          DEPLOY_DURATION=$((END_TIME - START_TIME))

          curl -X POST -H 'Content-type: application/json' --data "{
            \"text\": \"*배포 결과*: $STATUS\n*배포 브랜치*: $GITHUB_REF\n*배포에 걸린 시간*: ${DEPLOY_DURATION}s\n*배포한 사람*: $GITHUB_ACTOR\n*빌드번호*: $BUILD_NUMBER\n*환경*: $ENVIRONMENT\"
          }" $SLACK_WEBHOOK_URL
